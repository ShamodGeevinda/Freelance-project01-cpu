$date
	Sun May 28 21:39:49 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ! \registers[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 " \registers[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 # \registers[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 $ \registers[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 % \registers[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 & \registers[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ' \registers[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ( \registers[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ) \registers[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 * \registers[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 + \registers[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 , \registers[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 - \registers[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 . \registers[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 / \registers[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 0 \registers[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 1 \registers[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 2 \registers[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 3 \registers[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 4 \registers[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 5 \registers[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 6 \registers[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 7 \registers[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 8 \registers[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 9 \registers[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 : \registers[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ; \registers[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 < \registers[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 = \registers[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 > \registers[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ? \registers[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 @ \registers[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module f1 $end
$var reg 32 A register [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 B \instr_mem[0] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 C \instr_mem[1] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 D \instr_mem[2] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 E \instr_mem[3] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 F \instr_mem[4] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 G \instr_mem[5] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 H \instr_mem[6] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 I \instr_mem[7] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 J \instr_mem[8] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 K \instr_mem[9] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 L \instr_mem[10] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 M \instr_mem[11] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 N \instr_mem[12] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 O \instr_mem[13] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 P \instr_mem[14] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 Q \instr_mem[15] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 R \instr_mem[16] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 S \instr_mem[17] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 T \instr_mem[18] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 U \instr_mem[19] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var wire 32 V PC [31:0] $end
$var wire 19 W INSTRUCTION [18:0] $end
$var reg 1 X CLK $end
$var reg 1 Y RESET $end
$var integer 32 Z i [31:0] $end
$scope module mycpu $end
$var wire 1 X CLK $end
$var wire 19 [ INSTRUCTION [18:0] $end
$var wire 1 Y RESET $end
$var wire 1 \ ZERO $end
$var wire 1 ] WRITE_ENABLE $end
$var wire 32 ^ SIGN_EXTENDED_IMM [31:0] $end
$var wire 32 _ REG_IN [31:0] $end
$var wire 32 ` PC_PLUS_IMM [31:0] $end
$var wire 32 a OUT2 [31:0] $end
$var wire 32 b OUT1 [31:0] $end
$var wire 1 c OR_OUT $end
$var wire 32 d NEXTPC2 [31:0] $end
$var wire 32 e NEXTPC [31:0] $end
$var wire 1 f MOV_SELECT $end
$var wire 1 g IMM_SELECT $end
$var wire 32 h IMM_RESULT [31:0] $end
$var wire 1 i BRAZ $end
$var wire 1 j BRAUNCOND $end
$var wire 1 k BRANZ $end
$var wire 1 l AND_OUT2 $end
$var wire 1 m AND_OUT $end
$var wire 32 n ALU_OUT [31:0] $end
$var wire 3 o ALUOP [2:0] $end
$var reg 32 p PC [31:0] $end
$scope module a1 $end
$var wire 1 m OUTPUT $end
$var wire 1 \ INPUT2 $end
$var wire 1 i INPUT1 $end
$upscope $end
$scope module a2 $end
$var wire 1 q INPUT2 $end
$var wire 1 l OUTPUT $end
$var wire 1 k INPUT1 $end
$upscope $end
$scope module adr $end
$var wire 32 r ONE [31:0] $end
$var wire 32 s PC [31:0] $end
$var wire 32 t NEXTPC [31:0] $end
$upscope $end
$scope module adr2 $end
$var wire 32 u PC [31:0] $end
$var wire 32 v ONE [31:0] $end
$var wire 32 w NEXTPC [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 x SUB_OUT [31:0] $end
$var wire 3 y SELECT [2:0] $end
$var wire 32 z OR_OUT [31:0] $end
$var wire 32 { FORWARD_OUT [31:0] $end
$var wire 32 | DATA2 [31:0] $end
$var wire 32 } DATA1 [31:0] $end
$var wire 32 ~ AND_OUT [31:0] $end
$var wire 32 !" ADD_OUT [31:0] $end
$var reg 32 "" RESULT [31:0] $end
$scope module add1 $end
$var wire 32 #" DATA2 [31:0] $end
$var wire 32 $" DATA1 [31:0] $end
$var wire 32 %" ADD_OUT [31:0] $end
$upscope $end
$scope module and1 $end
$var wire 32 &" AND_OUT [31:0] $end
$var wire 32 '" DATA2 [31:0] $end
$var wire 32 (" DATA1 [31:0] $end
$upscope $end
$scope module fwd1 $end
$var wire 32 )" FORWARD_OUT [31:0] $end
$var wire 32 *" DATA2 [31:0] $end
$upscope $end
$scope module or1 $end
$var wire 32 +" OR_OUT [31:0] $end
$var wire 32 ," DATA2 [31:0] $end
$var wire 32 -" DATA1 [31:0] $end
$upscope $end
$scope module sub1 $end
$var wire 32 ." DATA2 [31:0] $end
$var wire 32 /" DATA1 [31:0] $end
$var wire 32 0" ADD_OUT [31:0] $end
$upscope $end
$upscope $end
$scope module f1 $end
$var wire 1 X CLK $end
$var wire 32 1" IN [31:0] $end
$var wire 1 Y RESET $end
$var wire 1 \ ZERO $end
$var wire 1 ] WRITE $end
$upscope $end
$scope module immediate_or_reg $end
$var wire 32 2" INPUT2 [31:0] $end
$var wire 1 g SELECT $end
$var wire 32 3" INPUT1 [31:0] $end
$var reg 32 4" OUTPUT [31:0] $end
$upscope $end
$scope module jump_mux $end
$var wire 32 5" INPUT1 [31:0] $end
$var wire 32 6" INPUT2 [31:0] $end
$var wire 1 c SELECT $end
$var reg 32 7" OUTPUT [31:0] $end
$upscope $end
$scope module move_mux $end
$var wire 32 8" INPUT1 [31:0] $end
$var wire 32 9" INPUT2 [31:0] $end
$var wire 1 f SELECT $end
$var reg 32 :" OUTPUT [31:0] $end
$upscope $end
$scope module mucu $end
$var wire 4 ;" OPCODE [3:0] $end
$var reg 3 <" ALUOP [2:0] $end
$var reg 1 k BRANZ $end
$var reg 1 j BRAUNCOND $end
$var reg 1 i BRAZ $end
$var reg 1 f MOV_SELECT $end
$var reg 1 g MUXIMM $end
$var reg 1 ] WRITEENABLE $end
$upscope $end
$scope module myregfile $end
$var wire 1 X CLK $end
$var wire 32 =" IN [31:0] $end
$var wire 5 >" INADDRESS [4:0] $end
$var wire 32 ?" OUT1 [31:0] $end
$var wire 5 @" OUT1ADDRESS [4:0] $end
$var wire 32 A" OUT2 [31:0] $end
$var wire 5 B" OUT2ADDRESS [4:0] $end
$var wire 1 Y RESET $end
$var wire 1 ] WRITE $end
$var integer 32 C" f [31:0] $end
$var integer 32 D" i [31:0] $end
$var integer 32 E" regNum [31:0] $end
$upscope $end
$scope module or1 $end
$var wire 1 m INPUT1 $end
$var wire 1 l INPUT2 $end
$var wire 1 j INPUT3 $end
$var wire 1 c OUTPUT $end
$upscope $end
$scope module signex $end
$var wire 15 F" CURRENT_VAL [14:0] $end
$var wire 32 G" NEW_VAL [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx G"
bx F"
bx E"
b100000 D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
b1 r
xq
bx p
bx o
bx n
xm
xl
xk
xj
xi
bx h
xg
xf
bx e
bx d
xc
bx b
bx a
bx `
bx _
bx ^
x]
x\
bx [
b10100 Z
1Y
0X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
b1000001010000001010 H
b1000001010000010001 G
b1001000000000000010 F
b1001000000100100 E
b10001000011 D
b1000000110000100001 C
b1000000100000000010 B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#4
b0 V
b0 p
b0 s
b0 u
1X
#5
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
b0 A
b100000 E"
b1 e
b1 t
b1 5"
#6
0l
0q
b1000 ;"
b10 >"
b0 @"
b10 B"
b100000000010 F"
b10 2"
b10 9"
1\
b1000000100000000010 W
b1000000100000000010 [
0Y
#7
b1 d
b1 7"
0c
b10 _
b10 :"
b10 ="
0m
b10 h
b10 |
b10 #"
b10 '"
b10 *"
b10 ,"
b10 ."
b10 4"
1f
0j
0k
0i
1]
b100 o
b100 y
b100 <"
1g
b100000000010 ^
b100000000010 v
b100000000010 G"
#8
b10 n
b10 ""
b10 1"
b10 8"
bx1x z
bx1x +"
b0x0 ~
b0x0 &"
b10 {
b10 )"
b100000000010 `
b100000000010 w
b100000000010 6"
b0 b
b0 }
b0 $"
b0 ("
b0 -"
b0 /"
b0 ?"
b0 a
b0 3"
b0 A"
0X
#9
b10 z
b10 +"
b0 ~
b0 &"
#10
b11111111111111111111111111111110 x
b11111111111111111111111111111110 0"
b10 !"
b10 %"
#12
1X
#13
b10 A
b10 #
b1 V
b1 p
b1 s
b1 u
#14
1q
b10 d
b10 7"
0\
b10 e
b10 t
b10 5"
b100000000011 `
b100000000011 w
b100000000011 6"
#15
b100001 _
b100001 :"
b100001 ="
b1 h
b1 |
b1 #"
b1 '"
b1 *"
b1 ,"
b1 ."
b1 4"
b11 >"
b1 @"
b1 B"
b110000100001 F"
b1 2"
b100001 9"
b10 a
b10 3"
b10 A"
b1000000110000100001 W
b1000000110000100001 [
#16
b1 n
b1 ""
b1 1"
b1 8"
b1 z
b1 +"
b1 {
b1 )"
b110000100001 ^
b110000100001 v
b110000100001 G"
0X
#17
b110000100010 `
b110000100010 w
b110000100010 6"
b11111111111111111111111111111111 x
b11111111111111111111111111111111 0"
b1 !"
b1 %"
b0 a
b0 3"
b0 A"
#20
1X
#21
b100001 $
b1 A
b10 V
b10 p
b10 s
b10 u
#22
b11 d
b11 7"
b11 e
b11 t
b11 5"
b110000100011 `
b110000100011 w
b110000100011 6"
#23
b11 h
b11 |
b11 #"
b11 '"
b11 *"
b11 ,"
b11 ."
b11 4"
b1000011 _
b1000011 :"
b1000011 ="
b0 ;"
b1 >"
b10 @"
b11 B"
b10001000011 F"
b11 2"
b1000011 9"
b10001000011 W
b10001000011 [
#24
b1 _
b1 :"
b1 ="
b0 h
b0 |
b0 #"
b0 '"
b0 *"
b0 ,"
b0 ."
b0 4"
b11 z
b11 +"
0f
b0 o
b0 y
b0 <"
0g
b11 {
b11 )"
b10001000011 ^
b10001000011 v
b10001000011 G"
0X
#25
b100001 h
b100001 |
b100001 #"
b100001 '"
b100001 *"
b100001 ,"
b100001 ."
b100001 4"
b0 z
b0 +"
b0 {
b0 )"
b10001000101 `
b10001000101 w
b10001000101 6"
b10 b
b10 }
b10 $"
b10 ("
b10 -"
b10 /"
b10 ?"
b100001 a
b100001 3"
b100001 A"
#26
b100011 z
b100011 +"
b100001 {
b100001 )"
#27
b100011 _
b100011 :"
b100011 ="
b100011 n
b100011 ""
b100011 1"
b100011 8"
b11111111111111111111111111100001 x
b11111111111111111111111111100001 0"
b100011 !"
b100011 %"
#28
1X
#29
b100011 A
b100011 "
b11 V
b11 p
b11 s
b11 u
#30
b100 d
b100 7"
b100 e
b100 t
b100 5"
b10001000110 `
b10001000110 w
b10001000110 6"
#31
b1 ;"
b100 >"
b1 @"
b100 B"
b1000000100100 F"
b100 2"
b100100 9"
b1001000000100100 W
b1001000000100100 [
#32
b100 h
b100 |
b100 #"
b100 '"
b100 *"
b100 ,"
b100 ."
b100 4"
1g
b1000000100100 ^
b1000000100100 v
b1000000100100 G"
0X
#33
b110 z
b110 +"
b100 {
b100 )"
b1000000100111 `
b1000000100111 w
b1000000100111 6"
b100011 b
b100011 }
b100011 $"
b100011 ("
b100011 -"
b100011 /"
b100011 ?"
b0 a
b0 3"
b0 A"
#34
b100111 z
b100111 +"
#35
b100111 _
b100111 :"
b100111 ="
b100111 n
b100111 ""
b100111 1"
b100111 8"
b11111 x
b11111 0"
b100111 !"
b100111 %"
#36
1X
#37
b100111 %
b100111 A
b100 V
b100 p
b100 s
b100 u
#38
b101 d
b101 7"
b101 e
b101 t
b101 5"
b1000000101000 `
b1000000101000 w
b1000000101000 6"
#39
b10 h
b10 |
b10 #"
b10 '"
b10 *"
b10 ,"
b10 ."
b10 4"
b1001 ;"
b0 >"
b0 @"
b10 B"
b10 F"
b10 2"
b10 9"
b100111 a
b100111 3"
b100111 A"
b1001000000000000010 W
b1001000000000000010 [
#40
b1000000101000 d
b1000000101000 7"
1c
b0 _
b0 :"
b0 ="
1l
b100111 h
b100111 |
b100111 #"
b100111 '"
b100111 *"
b100111 ,"
b100111 ."
b100111 4"
b0 n
b0 ""
b0 1"
b0 8"
b100011 z
b100011 +"
b10 ~
b10 &"
1k
x]
bx o
bx y
bx <"
0g
b10 {
b10 )"
b10 ^
b10 v
b10 G"
0X
#41
b110 d
b110 7"
b10 h
b10 |
b10 #"
b10 '"
b10 *"
b10 ,"
b10 ."
b10 4"
b100111 z
b100111 +"
b100011 ~
b100011 &"
b100111 {
b100111 )"
b110 `
b110 w
b110 6"
b0 b
b0 }
b0 $"
b0 ("
b0 -"
b0 /"
b0 ?"
b10 a
b10 3"
b10 A"
#42
b10 z
b10 +"
b0 ~
b0 &"
b10 {
b10 )"
#43
b10 !"
b10 %"
b11111111111111111111111111111110 x
b11111111111111111111111111111110 0"
#44
1X
#45
b110 V
b110 p
b110 s
b110 u
#46
b1000 d
b1000 7"
b111 e
b111 t
b111 5"
b1000 `
b1000 w
b1000 6"
#47
b1000 ;"
b101 >"
b1010 B"
b1010000001010 F"
b1010 2"
b1010 9"
b1000001010000001010 W
b1000001010000001010 [
#48
b111 d
b111 7"
0c
b1010 _
b1010 :"
b1010 ="
0l
b10 n
b10 ""
b10 1"
b10 8"
b1010 h
b1010 |
b1010 #"
b1010 '"
b1010 *"
b1010 ,"
b1010 ."
b1010 4"
1f
0k
1]
b100 o
b100 y
b100 <"
1g
b1010000001010 ^
b1010000001010 v
b1010000001010 G"
0X
#49
b1010 n
b1010 ""
b1010 1"
b1010 8"
b1010 z
b1010 +"
b1010 {
b1010 )"
b1010000010000 `
b1010000010000 w
b1010000010000 6"
b0 a
b0 3"
b0 A"
#50
b11111111111111111111111111110110 x
b11111111111111111111111111110110 0"
b1010 !"
b1010 %"
#52
1X
#53
b1010 &
b1010 A
b111 V
b111 p
b111 s
b111 u
#54
b1000 d
b1000 7"
b1000 e
b1000 t
b1000 5"
b1010000010001 `
b1010000010001 w
b1010000010001 6"
#55
bx h
bx |
bx #"
bx '"
bx *"
bx ,"
bx ."
bx 4"
bx _
bx :"
bx ="
bx ;"
bx >"
bx @"
bx B"
bx F"
bx 2"
bx 9"
bx W
bx [
#56
xc
xl
b0 n
b0 ""
b0 1"
b0 8"
bx z
bx +"
xf
xj
xk
xi
x]
bx o
bx y
bx <"
xg
bx {
bx )"
bx ^
bx v
bx G"
0X
#57
bx `
bx w
bx 6"
bx x
bx 0"
bx !"
bx %"
bx b
bx }
bx $"
bx ("
bx -"
bx /"
bx ?"
bx a
bx 3"
bx A"
#58
bx ~
bx &"
#60
1X
#61
b1000 V
b1000 p
b1000 s
b1000 u
#62
b1001 e
b1001 t
b1001 5"
#64
0X
#68
1X
#72
0X
#76
1X
#80
0X
#84
1X
#88
0X
#92
1X
#96
0X
#100
1X
#104
0X
#108
1X
#112
0X
#116
1X
#120
0X
#124
1X
#128
0X
#132
1X
#136
0X
#140
1X
#144
0X
#148
1X
#152
0X
#156
1X
#160
0X
#164
1X
#168
0X
#172
1X
#176
0X
#180
1X
#184
0X
#188
1X
#192
0X
#196
1X
#200
0X
b10000000000000000000000000000011 C"
#204
1X
#208
0X
#210
b100000 D"
#212
1X
#216
0X
#220
1X
#224
0X
#228
1X
#232
0X
#236
1X
#240
0X
#244
1X
#248
0X
#252
1X
#256
0X
1Y
#258
0Y
#260
1X
#264
0X
#268
1X
#272
0X
#276
1X
#280
0X
#284
1X
#288
0X
#292
1X
#296
0X
#300
1X
#304
0X
#308
1X
#312
0X
#316
1X
#320
0X
#324
1X
#328
0X
#332
1X
#336
0X
#340
1X
#344
0X
#348
1X
#352
0X
#356
1X
#360
0X
#364
1X
#368
0X
#372
1X
#376
0X
#380
1X
#384
0X
#388
1X
#392
0X
#396
1X
#400
0X
#404
1X
#408
0X
#412
1X
#416
0X
#420
1X
#424
0X
#428
1X
#432
0X
#436
1X
#440
0X
#444
1X
#448
0X
#452
1X
#456
0X
#460
1X
#464
0X
#468
1X
#472
0X
#476
1X
#480
0X
#484
1X
#488
0X
#492
1X
#496
0X
#500
1X
#504
0X
#508
1X
#512
0X
#516
1X
#520
0X
#524
1X
#528
0X
#532
1X
#536
0X
#540
1X
#544
0X
#548
1X
#552
0X
#556
1X
#560
0X
#564
1X
#568
0X
#572
1X
#576
0X
#580
1X
#584
0X
#588
1X
#592
0X
#596
1X
#600
0X
#604
1X
#608
0X
#612
1X
#616
0X
#620
1X
#624
0X
#628
1X
#632
0X
#636
1X
#640
0X
#644
1X
#648
0X
#652
1X
#656
0X
#660
1X
#664
0X
#668
1X
#672
0X
#676
1X
#680
0X
#684
1X
#688
0X
#692
1X
#696
0X
#700
1X
#704
0X
#708
1X
#712
0X
#716
1X
#720
0X
#724
1X
#728
0X
#732
1X
#736
0X
#740
1X
#744
0X
#748
1X
#752
0X
#756
1X
#758
