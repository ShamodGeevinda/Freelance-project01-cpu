$date
	Sun May 28 08:15:22 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ! \registers[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 " \registers[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 # \registers[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 $ \registers[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 % \registers[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 & \registers[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ' \registers[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ( \registers[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ) \registers[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 * \registers[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 + \registers[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 , \registers[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 - \registers[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 . \registers[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 / \registers[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 0 \registers[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 1 \registers[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 2 \registers[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 3 \registers[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 4 \registers[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 5 \registers[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 6 \registers[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 7 \registers[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 8 \registers[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 9 \registers[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 : \registers[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ; \registers[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 < \registers[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 = \registers[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 > \registers[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 ? \registers[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module myregfile $end
$var reg 32 @ \registers[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 A \instr_mem[0] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 B \instr_mem[1] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 C \instr_mem[2] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 D \instr_mem[3] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 E \instr_mem[4] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 F \instr_mem[5] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 G \instr_mem[6] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 H \instr_mem[7] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 I \instr_mem[8] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 J \instr_mem[9] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 K \instr_mem[10] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 L \instr_mem[11] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 M \instr_mem[12] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 N \instr_mem[13] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 O \instr_mem[14] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 P \instr_mem[15] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 Q \instr_mem[16] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 R \instr_mem[17] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 S \instr_mem[18] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var reg 19 T \instr_mem[19] [18:0] $end
$upscope $end
$scope module cpu_tb $end
$var wire 32 U PC [31:0] $end
$var wire 19 V INSTRUCTION [18:0] $end
$var reg 1 W CLK $end
$var reg 1 X RESET $end
$var integer 32 Y i [31:0] $end
$scope module mycpu $end
$var wire 1 W CLK $end
$var wire 19 Z INSTRUCTION [18:0] $end
$var wire 1 [ MOV_SELECT $end
$var wire 1 X RESET $end
$var wire 1 \ ZERO $end
$var wire 1 ] WRITE_ENABLE $end
$var wire 32 ^ SIGN_EXTENDED_IMM [31:0] $end
$var wire 32 _ REG_IN [31:0] $end
$var wire 32 ` PC_PLUS_IMM [31:0] $end
$var wire 32 a OUT2 [31:0] $end
$var wire 32 b OUT1 [31:0] $end
$var wire 1 c OR_OUT $end
$var wire 32 d NEXTPC2 [31:0] $end
$var wire 32 e NEXTPC [31:0] $end
$var wire 1 f IMM_SELECT $end
$var wire 32 g IMM_RESULT [31:0] $end
$var wire 1 h BRAZ $end
$var wire 1 i BRAUNCOND $end
$var wire 1 j BRANZ $end
$var wire 1 k AND_OUT2 $end
$var wire 1 l AND_OUT $end
$var wire 32 m ALU_OUT [31:0] $end
$var wire 3 n ALUOP [2:0] $end
$var reg 32 o PC [31:0] $end
$scope module a1 $end
$var wire 1 \ INPUT2 $end
$var wire 1 l OUTPUT $end
$var wire 1 h INPUT1 $end
$upscope $end
$scope module a2 $end
$var wire 1 p INPUT2 $end
$var wire 1 k OUTPUT $end
$var wire 1 j INPUT1 $end
$upscope $end
$scope module adr $end
$var wire 32 q ONE [31:0] $end
$var wire 32 r PC [31:0] $end
$var wire 32 s NEXTPC [31:0] $end
$upscope $end
$scope module adr2 $end
$var wire 32 t PC [31:0] $end
$var wire 32 u ONE [31:0] $end
$var wire 32 v NEXTPC [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 w SUB_OUT [31:0] $end
$var wire 3 x SELECT [2:0] $end
$var wire 32 y OR_OUT [31:0] $end
$var wire 32 z FORWARD_OUT [31:0] $end
$var wire 32 { DATA2 [31:0] $end
$var wire 32 | DATA1 [31:0] $end
$var wire 32 } AND_OUT [31:0] $end
$var wire 32 ~ ADD_OUT [31:0] $end
$var reg 32 !" RESULT [31:0] $end
$scope module add1 $end
$var wire 32 "" DATA2 [31:0] $end
$var wire 32 #" DATA1 [31:0] $end
$var wire 32 $" ADD_OUT [31:0] $end
$upscope $end
$scope module and1 $end
$var wire 32 %" AND_OUT [31:0] $end
$var wire 32 &" DATA2 [31:0] $end
$var wire 32 '" DATA1 [31:0] $end
$upscope $end
$scope module fwd1 $end
$var wire 32 (" FORWARD_OUT [31:0] $end
$var wire 32 )" DATA2 [31:0] $end
$upscope $end
$scope module or1 $end
$var wire 32 *" OR_OUT [31:0] $end
$var wire 32 +" DATA2 [31:0] $end
$var wire 32 ," DATA1 [31:0] $end
$upscope $end
$scope module sub1 $end
$var wire 32 -" DATA2 [31:0] $end
$var wire 32 ." DATA1 [31:0] $end
$var wire 32 /" ADD_OUT [31:0] $end
$upscope $end
$upscope $end
$scope module immediate_or_reg $end
$var wire 1 f SELECT $end
$var wire 32 0" INPUT2 [31:0] $end
$var wire 32 1" INPUT1 [31:0] $end
$var reg 32 2" OUTPUT [31:0] $end
$upscope $end
$scope module jump_mux $end
$var wire 32 3" INPUT1 [31:0] $end
$var wire 32 4" INPUT2 [31:0] $end
$var wire 1 c SELECT $end
$var reg 32 5" OUTPUT [31:0] $end
$upscope $end
$scope module move_mux $end
$var wire 32 6" INPUT1 [31:0] $end
$var wire 32 7" INPUT2 [31:0] $end
$var wire 1 [ SELECT $end
$var reg 32 8" OUTPUT [31:0] $end
$upscope $end
$scope module mucu $end
$var wire 4 9" OPCODE [3:0] $end
$var reg 3 :" ALUOP [2:0] $end
$var reg 1 j BRANZ $end
$var reg 1 i BRAUNCOND $end
$var reg 1 h BRAZ $end
$var reg 1 f MUXIMM $end
$var reg 1 ] WRITEENABLE $end
$upscope $end
$scope module myregfile $end
$var wire 1 W CLK $end
$var wire 32 ;" IN [31:0] $end
$var wire 5 <" INADDRESS [4:0] $end
$var wire 32 =" OUT1 [31:0] $end
$var wire 5 >" OUT1ADDRESS [4:0] $end
$var wire 32 ?" OUT2 [31:0] $end
$var wire 5 @" OUT2ADDRESS [4:0] $end
$var wire 1 X RESET $end
$var wire 1 ] WRITE $end
$var integer 32 A" f [31:0] $end
$var integer 32 B" i [31:0] $end
$var integer 32 C" regNum [31:0] $end
$upscope $end
$scope module or1 $end
$var wire 1 l INPUT1 $end
$var wire 1 k INPUT2 $end
$var wire 1 i INPUT3 $end
$var wire 1 c OUTPUT $end
$upscope $end
$scope module signex $end
$var wire 15 D" CURRENT_VAL [14:0] $end
$var wire 32 E" NEW_VAL [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx E"
bx D"
bx C"
b100000 B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
b1 q
zp
bx o
bx n
bx m
xl
xk
xj
xi
xh
bx g
xf
bx e
bx d
xc
bx b
bx a
bx `
bx _
bx ^
x]
z\
z[
bx Z
b10100 Y
1X
0W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
b1001000100000100101 M
b111010000011100100 L
b110010000011100000 K
b101001110011000111 J
b100001110001100101 I
b11001100001000001 H
b10001100010100010 G
b1001010010000101 F
b1000000100010 E
b100000011xxxxx00010 D
b1000000100001000010 C
b1000000010001000001 B
b1000000010001000001 A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#4
b0 U
b0 o
b0 r
b0 t
1W
#5
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
b100000 C"
b1 e
b1 s
b1 3"
#6
b1000 9"
b1 <"
b10 >"
b1 @"
bx000010001000001 ^
bx000010001000001 u
bx000010001000001 0"
bx000010001000001 E"
b10001000001 D"
b1000001 7"
b1000000010001000001 V
b1000000010001000001 Z
0X
#7
b1 d
b1 5"
0c
0k
0l
bx000010001000001 g
bx000010001000001 {
bx000010001000001 ""
bx000010001000001 &"
bx000010001000001 )"
bx000010001000001 +"
bx000010001000001 -"
bx000010001000001 2"
0i
0j
0h
1]
b100 n
b100 x
b100 :"
1f
#8
bx000010001000001 m
bx000010001000001 !"
bx000010001000001 6"
bx1xxx1xxxxx1 y
bx1xxx1xxxxx1 *"
bx0000x000x00000x }
bx0000x000x00000x %"
bx000010001000001 z
bx000010001000001 ("
b0 b
b0 |
b0 #"
b0 '"
b0 ,"
b0 ."
b0 ="
b0 a
b0 1"
b0 ?"
0W
#9
bx000010001000001 y
bx000010001000001 *"
b0 }
b0 %"
#12
1W
#13
bx "
b1 U
b1 o
b1 r
b1 t
#14
b10 d
b10 5"
b10 e
b10 s
b10 3"
#15
bx a
bx 1"
bx ?"
#16
0W
#20
1W
#21
bx "
b10 U
b10 o
b10 r
b10 t
#22
b11 d
b11 5"
b11 e
b11 s
b11 3"
#23
bx000100001000010 g
bx000100001000010 {
bx000100001000010 ""
bx000100001000010 &"
bx000100001000010 )"
bx000100001000010 +"
bx000100001000010 -"
bx000100001000010 2"
b10 <"
b10 @"
bx000100001000010 ^
bx000100001000010 u
bx000100001000010 0"
bx000100001000010 E"
b100001000010 D"
b1000010 7"
b1000000100001000010 V
b1000000100001000010 Z
#24
bx000100001000010 m
bx000100001000010 !"
bx000100001000010 6"
bx000100001000010 y
bx000100001000010 *"
bx000100001000010 z
bx000100001000010 ("
0W
#25
b0 a
b0 1"
b0 ?"
#28
1W
#29
bx #
b11 U
b11 o
b11 r
b11 t
#30
b100 d
b100 5"
b100 e
b100 s
b100 3"
#31
bx00011xxxxx00010 g
bx00011xxxxx00010 {
bx00011xxxxx00010 ""
bx00011xxxxx00010 &"
bx00011xxxxx00010 )"
bx00011xxxxx00010 +"
bx00011xxxxx00010 -"
bx00011xxxxx00010 2"
b11 <"
bx >"
bx00011xxxxx00010 ^
bx00011xxxxx00010 u
bx00011xxxxx00010 0"
bx00011xxxxx00010 E"
b11xxxxx00010 D"
bx00010 7"
bx b
bx |
bx #"
bx '"
bx ,"
bx ."
bx ="
bx a
bx 1"
bx ?"
b100000011xxxxx00010 V
b100000011xxxxx00010 Z
#32
bx00011xxxxx00010 m
bx00011xxxxx00010 !"
bx00011xxxxx00010 6"
bx11xxxxxxxx1x y
bx11xxxxxxxx1x *"
bx000xxxxxxx000x0 }
bx000xxxxxxx000x0 %"
bx00011xxxxx00010 z
bx00011xxxxx00010 ("
0W
#36
1W
#37
bx $
b100 U
b100 o
b100 r
b100 t
#38
b101 d
b101 5"
b101 e
b101 s
b101 3"
#39
bx001000000100010 g
bx001000000100010 {
bx001000000100010 ""
bx001000000100010 &"
bx001000000100010 )"
bx001000000100010 +"
bx001000000100010 -"
bx001000000100010 2"
b0 9"
b100 <"
b1 >"
bx001000000100010 ^
bx001000000100010 u
bx001000000100010 0"
bx001000000100010 E"
b1000000100010 D"
b100010 7"
b1000000100010 V
b1000000100010 Z
#40
bx g
bx {
bx ""
bx &"
bx )"
bx +"
bx -"
bx 2"
bx m
bx !"
bx 6"
bx1xxxxxx1xxx1x y
bx1xxxxxx1xxx1x *"
bx00x000000x000x0 }
bx00x000000x000x0 %"
b0 n
b0 x
b0 :"
0f
bx001000000100010 z
bx001000000100010 ("
0W
#41
bx y
bx *"
bx }
bx %"
bx z
bx ("
#44
1W
#45
bx %
b101 U
b101 o
b101 r
b101 t
#46
b110 d
b110 5"
b110 e
b110 s
b110 3"
#47
b1 9"
b101 <"
b100 >"
b101 @"
bx001010010000101 ^
bx001010010000101 u
bx001010010000101 0"
bx001010010000101 E"
b1010010000101 D"
b10000101 7"
b1001010010000101 V
b1001010010000101 Z
#48
bx001010010000101 g
bx001010010000101 {
bx001010010000101 ""
bx001010010000101 &"
bx001010010000101 )"
bx001010010000101 +"
bx001010010000101 -"
bx001010010000101 2"
1f
0W
#49
bx1x1xx1xxxx1x1 y
bx1x1xx1xxxx1x1 *"
bx00x0x00x0000x0x }
bx00x0x00x0000x0x %"
bx001010010000101 z
bx001010010000101 ("
b0 a
b0 1"
b0 ?"
#52
1W
#53
bx &
b110 U
b110 o
b110 r
b110 t
#54
b111 d
b111 5"
b111 e
b111 s
b111 3"
#55
bx001100010100010 g
bx001100010100010 {
bx001100010100010 ""
bx001100010100010 &"
bx001100010100010 )"
bx001100010100010 +"
bx001100010100010 -"
bx001100010100010 2"
b10 9"
b110 <"
b101 >"
b10 @"
bx001100010100010 ^
bx001100010100010 u
bx001100010100010 0"
bx001100010100010 E"
b1100010100010 D"
b10100010 7"
bx a
bx 1"
bx ?"
b10001100010100010 V
b10001100010100010 Z
#56
bx g
bx {
bx ""
bx &"
bx )"
bx +"
bx -"
bx 2"
bx11xxx1x1xxx1x y
bx11xxx1x1xxx1x *"
bx00xx000x0x000x0 }
bx00xx000x0x000x0 %"
b1 n
b1 x
b1 :"
0f
bx001100010100010 z
bx001100010100010 ("
0W
#57
bx y
bx *"
bx }
bx %"
bx z
bx ("
#60
1W
#61
bx '
b111 U
b111 o
b111 r
b111 t
#62
b1000 d
b1000 5"
b1000 e
b1000 s
b1000 3"
#63
b11 9"
b10 >"
b1 @"
bx001100001000001 ^
bx001100001000001 u
bx001100001000001 0"
bx001100001000001 E"
b1100001000001 D"
b1000001 7"
b11001100001000001 V
b11001100001000001 Z
#64
bx001100001000001 g
bx001100001000001 {
bx001100001000001 ""
bx001100001000001 &"
bx001100001000001 )"
bx001100001000001 +"
bx001100001000001 -"
bx001100001000001 2"
1f
0W
#65
bx11xxxx1xxxxx1 y
bx11xxxx1xxxxx1 *"
bx00xx0000x00000x }
bx00xx0000x00000x %"
bx001100001000001 z
bx001100001000001 ("
#68
1W
#69
bx '
b1000 U
b1000 o
b1000 r
b1000 t
#70
b1001 d
b1001 5"
b1001 e
b1001 s
b1001 3"
#71
bx001110001100101 g
bx001110001100101 {
bx001110001100101 ""
bx001110001100101 &"
bx001110001100101 )"
bx001110001100101 +"
bx001110001100101 -"
bx001110001100101 2"
b100 9"
b111 <"
b11 >"
b101 @"
bx001110001100101 ^
bx001110001100101 u
bx001110001100101 0"
bx001110001100101 E"
b1110001100101 D"
b1100101 7"
b100001110001100101 V
b100001110001100101 Z
#72
bx g
bx {
bx ""
bx &"
bx )"
bx +"
bx -"
bx 2"
bx00xxx000xx00x0x m
bx00xxx000xx00x0x !"
bx00xxx000xx00x0x 6"
bx111xxx11xx1x1 y
bx111xxx11xx1x1 *"
bx00xxx000xx00x0x }
bx00xxx000xx00x0x %"
b10 n
b10 x
b10 :"
0f
bx001110001100101 z
bx001110001100101 ("
0W
#73
bx m
bx !"
bx 6"
bx y
bx *"
bx }
bx %"
bx z
bx ("
#76
1W
#77
bx (
b1001 U
b1001 o
b1001 r
b1001 t
#78
b1010 d
b1010 5"
b1010 e
b1010 s
b1010 3"
#79
b101 9"
b110 >"
b111 @"
bx001110011000111 ^
bx001110011000111 u
bx001110011000111 0"
bx001110011000111 E"
b1110011000111 D"
b11000111 7"
b101001110011000111 V
b101001110011000111 Z
#80
bx001110011000111 g
bx001110011000111 {
bx001110011000111 ""
bx001110011000111 &"
bx001110011000111 )"
bx001110011000111 +"
bx001110011000111 -"
bx001110011000111 2"
1f
0W
#81
bx00xxx00xx000xxx m
bx00xxx00xx000xxx !"
bx00xxx00xx000xxx 6"
bx111xx11xxx111 y
bx111xx11xxx111 *"
bx00xxx00xx000xxx }
bx00xxx00xx000xxx %"
bx001110011000111 z
bx001110011000111 ("
#84
1W
#85
bx (
b1010 U
b1010 o
b1010 r
b1010 t
#86
b1011 d
b1011 5"
b1011 e
b1011 s
b1011 3"
#87
bx010000011100000 g
bx010000011100000 {
bx010000011100000 ""
bx010000011100000 &"
bx010000011100000 )"
bx010000011100000 +"
bx010000011100000 -"
bx010000011100000 2"
b110 9"
b1000 <"
b111 >"
b0 @"
bx010000011100000 ^
bx010000011100000 u
bx010000011100000 0"
bx010000011100000 E"
b10000011100000 D"
b11100000 7"
b110010000011100000 V
b110010000011100000 Z
#88
bx g
bx {
bx ""
bx &"
bx )"
bx +"
bx -"
bx 2"
bx1xxxxx111xxxxx m
bx1xxxxx111xxxxx !"
bx1xxxxx111xxxxx 6"
bx1xxxxx111xxxxx y
bx1xxxxx111xxxxx *"
bx0x00000xxx00000 }
bx0x00000xxx00000 %"
b11 n
b11 x
b11 :"
0f
bx010000011100000 z
bx010000011100000 ("
0W
#89
bx m
bx !"
bx 6"
b0 g
b0 {
b0 ""
b0 &"
b0 )"
b0 +"
b0 -"
b0 2"
bx y
bx *"
bx }
bx %"
bx z
bx ("
b0 a
b0 1"
b0 ?"
#90
b0 }
b0 %"
b0 z
b0 ("
#92
1W
#93
bx )
b1011 U
b1011 o
b1011 r
b1011 t
#94
b1100 d
b1100 5"
b1100 e
b1100 s
b1100 3"
#95
b111 9"
b100 @"
bx010000011100100 ^
bx010000011100100 u
bx010000011100100 0"
bx010000011100100 E"
b10000011100100 D"
b11100100 7"
b111010000011100100 V
b111010000011100100 Z
#96
bx010000011100100 g
bx010000011100100 {
bx010000011100100 ""
bx010000011100100 &"
bx010000011100100 )"
bx010000011100100 +"
bx010000011100100 -"
bx010000011100100 2"
1f
0W
#97
bx1xxxxx111xx1xx m
bx1xxxxx111xx1xx !"
bx1xxxxx111xx1xx 6"
bx1xxxxx111xx1xx y
bx1xxxxx111xx1xx *"
bx0x00000xxx00x00 }
bx0x00000xxx00x00 %"
bx010000011100100 z
bx010000011100100 ("
bx a
bx 1"
bx ?"
#100
1W
#101
bx )
b1100 U
b1100 o
b1100 r
b1100 t
#102
b1101 d
b1101 5"
b1101 e
b1101 s
b1101 3"
#103
bx000100000100101 g
bx000100000100101 {
bx000100000100101 ""
bx000100000100101 &"
bx000100000100101 )"
bx000100000100101 +"
bx000100000100101 -"
bx000100000100101 2"
b1001 9"
b10 <"
b1 >"
b101 @"
bx000100000100101 ^
bx000100000100101 u
bx000100000100101 0"
bx000100000100101 E"
b100000100101 D"
b100101 7"
b1001000100000100101 V
b1001000100000100101 Z
#104
xc
xk
bx g
bx {
bx ""
bx &"
bx )"
bx +"
bx -"
bx 2"
b0 m
b0 !"
b0 6"
bx1xxxxx1xx1x1 y
bx1xxxxx1xx1x1 *"
bx000x00000x00x0x }
bx000x00000x00x0x %"
1j
x]
bx n
bx x
bx :"
0f
bx000100000100101 z
bx000100000100101 ("
0W
#105
bx y
bx *"
bx }
bx %"
bx z
bx ("
#108
1W
#109
b1101 U
b1101 o
b1101 r
b1101 t
#110
b1110 e
b1110 s
b1110 3"
#111
bx 9"
bx <"
bx >"
bx @"
bx ^
bx u
bx 0"
bx E"
bx D"
bx 7"
bx V
bx Z
#112
xl
xi
xj
xh
xf
0W
#116
1W
#120
0W
#124
1W
#128
0W
#132
1W
#136
0W
#140
1W
#144
0W
#148
1W
#152
0W
#156
1W
#160
0W
#164
1W
#168
0W
#172
1W
#176
0W
#180
1W
#184
0W
#188
1W
#192
0W
#196
1W
#200
0W
b10000000000000000000000000000011 A"
#204
1W
#208
0W
#210
b100000 B"
#212
1W
#216
0W
#220
1W
#224
0W
#228
1W
#232
0W
#236
1W
#240
0W
#244
1W
#248
0W
#252
1W
#256
0W
1X
#258
0X
#260
1W
#264
0W
#268
1W
#272
0W
#276
1W
#280
0W
#284
1W
#288
0W
#292
1W
#296
0W
#300
1W
#304
0W
#308
1W
#312
0W
#316
1W
#320
0W
#324
1W
#328
0W
#332
1W
#336
0W
#340
1W
#344
0W
#348
1W
#352
0W
#356
1W
#360
0W
#364
1W
#368
0W
#372
1W
#376
0W
#380
1W
#384
0W
#388
1W
#392
0W
#396
1W
#400
0W
#404
1W
#408
0W
#412
1W
#416
0W
#420
1W
#424
0W
#428
1W
#432
0W
#436
1W
#440
0W
#444
1W
#448
0W
#452
1W
#456
0W
#460
1W
#464
0W
#468
1W
#472
0W
#476
1W
#480
0W
#484
1W
#488
0W
#492
1W
#496
0W
#500
1W
#504
0W
#508
1W
#512
0W
#516
1W
#520
0W
#524
1W
#528
0W
#532
1W
#536
0W
#540
1W
#544
0W
#548
1W
#552
0W
#556
1W
#560
0W
#564
1W
#568
0W
#572
1W
#576
0W
#580
1W
#584
0W
#588
1W
#592
0W
#596
1W
#600
0W
#604
1W
#608
0W
#612
1W
#616
0W
#620
1W
#624
0W
#628
1W
#632
0W
#636
1W
#640
0W
#644
1W
#648
0W
#652
1W
#656
0W
#660
1W
#664
0W
#668
1W
#672
0W
#676
1W
#680
0W
#684
1W
#688
0W
#692
1W
#696
0W
#700
1W
#704
0W
#708
1W
#712
0W
#716
1W
#720
0W
#724
1W
#728
0W
#732
1W
#736
0W
#740
1W
#744
0W
#748
1W
#752
0W
#756
1W
#758
